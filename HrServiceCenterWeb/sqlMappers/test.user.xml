<?xml version="1.0" encoding="utf-8" ?>
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离  -->
<!-- 注意：使用mapper代理方法开发，namespace有特殊重要的作用 -->
<mapper namespace="test">

  <!-- 在 映射文件中配置很多sql语句 -->
  <!-- 将sql语句封装到mappedStatement对象中，所以将id称为statement的id -->
  <!-- parameterType：指定输入 参数的类型，这里指定int型 #{}表示一个占位符号 -->
  <!-- #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 -->
  <!-- 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称 -->
  <!-- resultType：通过泛型参数传入。 -->
  <select id="findUserById" >
    <!-- 需求：通过select执行id查询用户表的记录 -->
    SELECT * FROM [USER] WHERE id=#{value}
  </select>

  <!-- resultType：指定就是单条记录所映射的java对象类型  -->
  <!-- ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。 使用${}拼接sql，引起 sql注入  -->
  <!-- ${value}：接收输入 参数的内容，如果传入类型是简单类型，${}中只能使用value -->
  <!-- 这个mapper文件user对象已经用别名代替 -->
  <select id="findUserByName" >
    <!-- 根据用户名称模糊查询用户信息，可能返回多条  -->
    SELECT * FROM [USER] WHERE username LIKE '%${value}%'
  </select>


  <!-- parameterType：指定输入 参数类型是pojo（包括 用户信息）-->
  <!-- #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
  <insert id="insertUser" parameterType="user">
    <!-- SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键 -->
    <!-- keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 -->
    <!-- order：AFTER SELECT LAST_INSERT_ID() ，inserting 插入触发器 BEFOR 序列或外部主键 -->
    <!-- resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
    <selectKey keyProperty="UserId" order="INSERTING" >
      <!-- 将插入数据的主键返回，返回到user对象中，下列为sqlserver自增主键 -->
      select @UserId=@@IDENTITY
    </selectKey>
    insert into [user](username,birthday,address,sex) values(#{UserName},#{Birthday},#{Address},#{Sex})
    <!-- 使用mysql的uuid（）生成主键 执行过程： -->
    <!-- 首先通过uuid()得到主键，将主键设置到user对象的id属性中 其次在insert执行时，从user对象中取出id属性值 -->
    <!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"> -->
    <!-- SELECT uuid() </selectKey> insert into user(id,username,birthday,sex,address) -->
    <!-- value(#{id},#{username},#{birthday},#{sex},#{address}) -->
  </insert>


  <delete id="deleteUser" >
    <!-- 删除 用户 根据id删除用户，需要输入 id值 -->
    delete from [user] where id=#{value}
  </delete>

  <delete id="deleteUserBySex" >
    <!-- 删除 用户 根据id删除用户，需要输入 id值 -->
    delete from [user] where sex=#{value}
  </delete>

  <!-- 需要传入用户的更新信息 parameterType指定user对象，包括 id和更新信息， -->
  <!-- 注意：id必须存在 -->
  <!-- #{id}：从输入 user对象中获取id属性值 -->
  <update id="updateUser" parameterType="user">
    <!-- 根据id更新用户 分析： 需要传入用户的id -->
    update [user] set
    username=#{UserName},birthday=#{Birthday},sex=#{Sex},address=#{Address}
    where id=#{UserId}
  </update>

</mapper>
